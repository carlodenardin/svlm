### Algorithm Overview

The algorithm is designed to sort a list of integers in ascending order. It takes a list of integers as input and returns a sorted list.

### Input Data

- **List of integers**: The input is a list of integers that needs to be sorted.

### Main Logical Flow

1. **Input Validation**:
   - Check if the input list is empty. If it is, return an empty list.

2. **Sorting the List**:
   - Use the `sort()` function to sort the list in ascending order.

3. **Output**:
   - Return the sorted list.

### Expected Output

- A sorted list of integers in ascending order.

### Implementation

```python
def sort_list(lst):
    # Step 1: Input Validation
    if not lst:
        return []

    # Step 2: Sorting the List
    lst.sort()

    # Step 3: Output
    return lst

# Example usage
input_list = [5, 3, 8, 1, 2]
sorted_list = sort_list(input_list)
print(sorted_list)  # Output: [1, 2, 3, 5, 8]
```

### Explanation

- **Input Validation**: The algorithm first checks if the input list is empty. If it is, it returns an empty list to avoid any errors.
- **Sorting the List**: The `sort()` function is used to sort the list in place. This function modifies the original list directly.
- **Output**: The sorted list is returned as the final output.

This algorithm is efficient and straightforward, leveraging Python's built-in sorting capabilities to achieve the desired result.