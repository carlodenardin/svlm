**Algorithm Overview**  
This algorithm receives an integer and calculates the product of all its odd digits. If the integer contains no odd digits, the algorithm returns 0.

---

### 1. **Purpose**
To compute the product of all odd digits present in an integer, or return 0 if there are none.

---

### 2. **Input Required**
- A single integer value (letâ€™s call it `n`).

---

### 3. **Logical Flow**
1. **Receive Input**  
   - Accept an integer input `n`.

2. **Extract Digits and Compute Product**  
   - Initialize a variable `product` to 1.
   - Initialize a flag `odd_found` to `False` (to track if any odd digit is present).
   - Iterate through each digit of `n` (convert to string or use modulo operation).
     - For each digit:
       - If the digit is odd:
         - Multiply `product` by this digit.
         - Set `odd_found` to `True`.

3. **Return Result**  
   - If no odd digits (`odd_found` is `False`), return 0.
   - Else, return the computed `product`.

---

### 4. **Expected Output**
- The product of all odd digits in the integer, or `0` if no odd digits are present.

---

## **Pseudocode Implementation**

```python
def product_of_odd_digits(n):
    product = 1
    odd_found = False
    for digit in str(abs(n)):  # handle negative numbers
        d = int(digit)
        if d % 2 == 1:
            product *= d
            odd_found = True
    return product if odd_found else 0
```

---

## **Example**
**Input:** `n = 2436`  
**Odd digits:** 3  
**Product:** 3  
**Output:** `3`

**Input:** `n = 2468`  
**Odd digits:** (none)  
**Output:** `0`

---

This step-by-step plan allows for direct implementation in any programming language.