The algorithm described in the flowchart aims to compute the product of the odd digits of a given positive integer. Here's a step-by-step implementation:

1. **Input**: Receive a positive integer as input.
2. **Initialization**: Set variables to store the original number and an empty string for storing the odd digits.
3. **Extract Odd Digits**: Iterate through each digit of the number, check if it is odd, and append it to the string of odd digits.
4. **Product Calculation**: If there are any odd digits (i.e., the string of odd digits is not empty), calculate the product of these digits using a loop or built-in function like `math.prod()`.
5. **Output Decision**: Check if the result from the previous step is zero. If so, return 0; otherwise, return the calculated product.

### Pseudocode Implementation
```
function productOfOddDigits(num):
    originalNum = num
    oddDigits = ""
    for i in range(len(str(num))):
        digit = int(str(num)[i])
        if digit % 2 != 0:
            oddDigits += str(digit)
    
    if len(oddDigits) == 0:
        return 0
    else:
        product = 1
        for digit in oddDigits:
            product *= int(digit)
        return product
```

### Example Steps
1. Input: 123456
2. Extract odd digits: 1, 3, 5
3. Calculate product: 1 * 3 * 5 = 15
4. Output: 15

This structured approach ensures clarity and correctness in implementing the logic required by the flowchart.