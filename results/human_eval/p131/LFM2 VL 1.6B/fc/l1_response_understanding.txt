### Algorithm Implementation: Odd Digit Calculator

#### Overview
The algorithm is designed to calculate the product of the odd digits of a given positive integer \( n \). If there are no odd digits, it returns 0.

#### Input Data
- **Input**: A positive integer \( n \).

#### Main Logical Flow
1. **Start**: Begin the process.
2. **Input the integer \( n \)**: Read the positive integer \( n \) from the input.
3. **Check for odd digits**:
   - **Decision**: Is \( n \) odd?
     - **If Yes**: Proceed to step 4.
     - **If No**: Proceed to step 5.
4. **Calculate the product of odd digits**:
   - **Decision**: Are there any odd digits in \( n \)?
     - **If Yes**: Proceed to step 5.
     - **If No**: Return 0.
   - **Function Call**: Calculate the product of the odd digits.
5. **End**: End the process.

#### Expected Output
- **Output**: The product of the odd digits of \( n \). If \( n \) has no odd digits, the output is 0.

#### Example
- **Input**: 123
- **Output**: 1 (since 1 is the product of the odd digits 1)

#### Pseudocode
```plaintext
Start
  Input the integer n
  If n is odd
    Calculate the product of the odd digits of n
    Return the product
  Else
    Return 0
End
```

#### Implementation
```python
def odd_digit_product(n):
    # Convert the integer to a string to easily iterate over its digits
    n_str = str(n)
    
    # Initialize the product to 1
    product = 1
    
    # Check if the number has any odd digits
    for digit in n_str:
        if int(digit) % 2!= 0:
            # Calculate the product of the odd digits
            product *= int(digit)
    
    # Return the product
    return product

# Example usage
n = 123
result = odd_digit_product(n)
print(f"The product of the odd digits of {n} is: {result