### Algorithm Implementation Overview

**Purpose:**
The algorithm is designed to compute the product of a sequence of odd digits received as input. If there are no odd digits, it returns 0.

**Input Data Required:**
- A sequence of integers representing the digits of the product.

**Main Logical Flow:**
1. **Input Validation:**
   - Check if the input sequence contains only integers.
   - If not, return an error message or handle the input appropriately.

2. **Compute the Product:**
   - Initialize a variable `product` to 1.
   - Iterate through each digit in the input sequence:
     - If the digit is odd, multiply the current `product` by the digit.
   - After the loop, check if the `product` is still 1.
     - If `product` is 1, return 0 (indicating no odd digits were found).
     - Otherwise, return the computed `product`.

3. **Output:**
   - Return the final computed product.

**Expected Output:**
- The product of the odd digits in the input sequence.
- If there are no odd digits, return 0.

### Step-by-Step Implementation

1. **Input Validation:**
   - Ensure the input is a list of integers.
   - If not, return an error message.

2. **Compute the Product:**
   - Initialize `product` to 1.
   - For each digit `d` in the input sequence:
     - If `d` is odd, update `product` by multiplying it with `d`.
   - After the loop, check if `product` is 1.
     - If `product` is 1, return 0.
     - Otherwise, return `product`.

3. **Output:**
   - Return the computed product.

### Example Code

```python
def compute_product(input_sequence):
    # Input validation
    if not all(isinstance(x, int) for x in input_sequence):
        return "Error: Input must be a list of integers."
    
    # Compute the product
    product = 1
    for digit in input_sequence:
        if digit % 2!= 0:
            product *= digit
    
    # Return the result
    if product == 1:
        return 0
    else:
        return product

# Example usage
input_sequence = [1