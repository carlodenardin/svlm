### Algorithm Overview

The algorithm is designed to determine whether a given integer `n` is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The algorithm takes an integer `n` as input and returns `True` if `n` is a prime number, and `False` otherwise.

### Input Data

The algorithm requires a single input: an integer `n`. The input is expected to be a positive integer.

### Main Logical Flow

1. **Start**: The algorithm begins.
2. **Input n, x as integers**: The algorithm prompts the user to input two integers, `n` and `x`.
3. **Check if n is a prime number**:
   - **Is n prime?**: The algorithm checks if `n` is a prime number.
     - **YES**: If `n` is prime, the algorithm sets `x` to `n` and returns `True`.
     - **NO**: If `n` is not prime, the algorithm sets `x` to `n` and returns `False`.
4. **End**: The algorithm ends.

### Expected Output

- **True**: If `n` is a prime number.
- **False**: If `n` is not a prime number.

### Implementation Steps

1. **Input n and x**:
   - Prompt the user to enter two integers, `n` and `x`.
   - Convert the input strings to integers using `int(input())`.

2. **Check if n is prime**:
   - Use a helper function `is_prime(n)` to determine if `n` is prime.
   - The `is_prime` function checks if `n` is greater than 1 and if all numbers from 2 to the square root of `n` do not divide `n`.

3. **Set x to n**:
   - If `n` is prime, set `x` to `n` and return `True`.

4. **Set x to n**:
   - If `n` is not prime, set `x` to `n` and return `False`.

5. **End**:
   - The algorithm ends.

### Pseudocode

```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range