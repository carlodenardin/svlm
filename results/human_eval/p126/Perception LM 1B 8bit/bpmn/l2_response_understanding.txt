**Algorithm Overview**
======================

### Purpose
The algorithm is designed to determine if a list of integers is sorted. It checks for the presence of numbers that appear more than twice in the list.

### Input Data
* A list of integers

### Main Logical Flow
#### Step 1: Receive a List of Integers
* The algorithm starts by receiving a list of integers as input.

#### Step 2: Is Sorted?
* The algorithm checks if the list is sorted.
* If the list is sorted, the algorithm proceeds to the next step.
* If the list is not sorted, the algorithm returns False.

#### Step 3: Numbers Appears More Than Twice?
* The algorithm checks if the list contains numbers that appear more than twice.
* If the list contains such numbers, the algorithm returns False.
* If the list does not contain such numbers, the algorithm returns True.

#### Step 4: Return True
* If the list is sorted and does not contain numbers that appear more than twice, the algorithm returns True.

#### Step 5: Return False
* If the list is sorted and contains numbers that appear more than twice, the algorithm returns False.

### Expected Output
* The algorithm returns True if the list is sorted and does not contain numbers that appear more than twice, and False otherwise.

### Implementation
```python
def is_sorted_and_no_duplicates(input_list):
    """
    Checks if a list of integers is sorted and does not contain numbers that appear more than twice.

    Args:
        input_list (list): A list of integers.

    Returns:
        bool: True if the list is sorted and does not contain numbers that appear more than twice, False otherwise.
    """
    # Check if the list is sorted
    if not input_list:
        return False

    # Check if the list contains numbers that appear more than twice
    if len(set(input_list))!= len(input_list):
        return False

    # Return True if the list is sorted and does not contain numbers that appear more than twice
    return True

# Example usage:
input_list = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]
print(is_sorted_and_no_duplicates(input_list))  # Output: True
```