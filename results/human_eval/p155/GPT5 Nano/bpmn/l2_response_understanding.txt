**Overview**  
The algorithm counts the number of even and odd digits in a given integer and returns the result as a tuple.

---

**Input Data**  
- A single integer value (can be positive or negative).

---

**Main Logical Flow**
1. **Receive an integer input.**
    - Example: `num = 12345`
2. **Initialize two counters:**  
   - `even = 0`  
   - `odd = 0`
3. **Iterate over each digit in the integer:**
    - Convert the integer to its absolute value and to a string to access each digit.
    - For each digit:
        - Convert the character to an integer: `digit = int(character)`
        - If the digit is even (`digit % 2 == 0`), increment the `even` counter.
        - Else, increment the `odd` counter.
4. **Return a tuple** containing the results: `(even, odd)`

---

**Expected Output**  
- A tuple with two integers: the first is the number of even digits, the second is the number of odd digits.

---

**Sample Implementation (Python)**
```python
def count_even_odd_digits(num):
    num = abs(num)  # Ignore sign
    even = 0
    odd = 0
    for digit_char in str(num):
        digit = int(digit_char)
        if digit % 2 == 0:
            even += 1
        else:
            odd += 1
    return (even, odd)
```

**Sample Output**
```python
count_even_odd_digits(12345)  # returns (2, 3)
```

---

This describes the algorithm and its ready-to-implement steps based on the flowchart.