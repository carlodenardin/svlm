**Algorithm Overview: Counting Even and Odd Digits**
=====================================================

### Purpose
The algorithm is designed to count the number of even and odd digits in a given integer input.

### Input Data
*   The input is an integer.

### Main Logical Flow
#### Step 1: Receive an Integer as Input
*   The algorithm receives an integer as input.

#### Step 2: Count the Even and Odd Digits
*   It then counts the number of even and odd digits in the input integer.

#### Step 3: Return (Even, Odd)
*   Finally, the algorithm returns the count of even and odd digits.

### Expected Output
*   The algorithm outputs the count of even and odd digits in the input integer.

### Implementation
```python
def count_even_odd_digits(n):
    """
    Counts the number of even and odd digits in a given integer.

    Args:
        n (int): The input integer.

    Returns:
        tuple: A tuple containing the count of even and odd digits.
    """
    even_digits = 0
    odd_digits = 0

    while n > 0:
        if n % 2 == 0:
            even_digits += 1
        else:
            odd_digits += 1
        n //= 2

    return even_digits, odd_digits

# Example usage
n = 12345
even, odd = count_even_odd_digits(n)
print(f"Count of even digits: {even}, Count of odd digits: {odd}")
```
This implementation uses a simple while loop to iterate through the input integer, counting the even and odd digits. The `count_even_odd_digits` function takes an integer as input and returns a tuple containing the count of even and odd digits. The example usage demonstrates how to use the function with the input integer 12345.