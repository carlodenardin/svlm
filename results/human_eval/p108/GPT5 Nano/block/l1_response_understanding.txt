### Overview
The algorithm counts how many numbers in a provided list have a sum of digits greater than 0.

---

### Input Data
- A list of integers (e.g., `[100, 0, -45, 11]`).

---

### Main Logical Flow

1. **Receive Input**
    - Take a list of integers as input.
2. **Initialize Count**
    - Initialize a count variable to 0.
3. **Iterate Through List**
    - For each integer in the list:
        - Calculate the sum of its digits (ignore sign if negative).
        - Check if the sum of digits is greater than 0.
        - If yes, increment the count by 1.
4. **Return Output**
    - Return the final count.

---

### Expected Output
- A single integer: the number of list values whose digit sum is greater than 0.

---

### Example Implementation in Python

```python
def count_positive_digit_sums(int_list):
    count = 0
    for num in int_list:
        digit_sum = sum(int(d) for d in str(abs(num)))  # ignore sign
        if digit_sum > 0:
            count += 1
    return count
```

---

### Summary Table

| Input                 | Output    |
|-----------------------|-----------|
| `[100, 0, -45, 11]`   | `3`       |
| `[0, 0, 0]`           | `0`       |
| `[-123, 456, 0, 90]`  | `3`       |

This structure is ready for implementation in any common programming language.