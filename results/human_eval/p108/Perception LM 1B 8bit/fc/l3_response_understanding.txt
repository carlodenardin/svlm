**Algorithm Overview**
======================

### Purpose
The algorithm is designed to calculate the sum of digits in a given integer. It takes an integer as input and returns the sum of its digits.

### Input Data
*   The algorithm requires an integer as input.

### Main Logical Flow
#### Step 1: Initialize Variables
*   Initialize a variable `res` to 0 and an integer `i` to 0.
*   Initialize an array `arr` to a list of integers.

#### Step 2: Calculate Sum of Digits
*   Iterate through each element `n` in the array `arr`.
*   For each element `n`, calculate the sum of its digits using the formula `digits[-1] = isNeg`.
*   If the sum of digits is greater than 0, add 1 to `res`.
*   If the sum of digits is less than 0, subtract 1 from `res`.

#### Step 3: Return Sum of Digits
*   Return the final value of `res`.

### Expected Output
*   The algorithm returns the sum of the digits in the input integer.

### Implementation
```python
def calculate_sum_of_digits(n):
    """
    Calculate the sum of digits in an integer.

    Args:
        n (int): The input integer.

    Returns:
        int: The sum of digits in the input integer.
    """
    res = 0
    i = 0
    arr = [int(x) for x in str(n)]

    while i < len(arr):
        if arr[i] < 0:
            isNeg = -1
        else:
            isNeg = 1

        if sum(arr[:i+1]) > 0:
            res += 1
        else:
            res += 1

        i += 1

    return res

# Example usage:
print(calculate_sum_of_digits(12345))  # Output: 5
```
This implementation follows the algorithm's steps, calculating the sum of digits in the input integer using a loop and conditional statements.