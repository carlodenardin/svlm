**Algorithm Overview:**
This algorithm calculates the sum of the digits of a given integer and returns the binary representation of that sum as a string.

---

### **1. Purpose**
Convert the sum of the digits of an integer into its binary representation.

---

### **2. Input Data Required**
- A single integer (`number`)

---

### **3. Main Logical Flow**

1. **Receive Input**
   - Get an integer input from the user or caller.

2. **Initialize Variables**
   - `sum = 0` (to store the sum of digits)
   - `res = ""` (to store the binary result)

3. **Sum the Digits**
   - For each digit in the input number:
     - Extract the digit using modulus and division (or by treating the number as a string and iterating over the characters).
     - Add each digit to `sum`.

4. **Convert Sum to Binary**
   - Convert the value in `sum` to its binary representation (as a string).
   - Assign this binary string to `res`.

5. **Return Result**
   - Return the value of `res`.

---

### **4. Expected Output**
- A string containing the binary representation of the sum of the digits.

---

## **Sample Implementation (Python-like Pseudocode)**

```python
def sum_of_digits_to_binary(number):
    # Step 2: Initialize variables
    sum_digits = 0
    res = ""
    
    # Step 3: Compute sum of digits
    temp = abs(number)  # Handle negative integers
    while temp > 0:
        sum_digits += temp % 10
        temp //= 10

    # Step 4: Convert sum to binary
    res = bin(sum_digits)[2:]  # [2:] to remove the '0b' prefix

    # Step 5: Return binary result
    return res
```

---

### **Example**
**Input:** `123`
- Sum of digits: `1 + 2 + 3 = 6`
- Binary: `'110'`

**Output:**  
`"110"`

---

**This step-by-step description, along with the sample code, should serve as a clear guide to implement the algorithm in any major programming language.**