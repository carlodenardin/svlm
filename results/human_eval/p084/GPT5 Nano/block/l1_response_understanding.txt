Certainly! Here’s a step-by-step description ready for implementation based on the provided flowchart:

---

**1. Overview (Purpose):**  
The algorithm takes a non-negative integer as input, sums its decimal digits, converts the sum to its binary representation, and returns the binary result as a string.

---

**2. Input Data Required:**  
- An integer \( n \) where \( 0 \leq n \).

---

**3. Main Logical Flow:**  

**Step 1: Receive Input**
- Obtain an integer value \( n \).

**Step 2: Sum the Digits**
- Initialize a variable to hold the sum.
- While \( n > 0 \):
  - Add the last digit \((n \% 10)\) to the sum.
  - Remove the last digit by integer division \((n = n // 10)\).
- (If \( n == 0 \), the sum is 0.)

**Step 3: Convert to Binary**
- Take the computed sum and convert it into its binary representation.
- (Most languages have a built-in function for this, e.g., `bin()` in Python. Remove any prefixes, e.g., '0b'.)

**Step 4: Return Result**
- Return the binary representation as a string.

---

**4. Expected Output:**  
- A string representing the binary format of the sum of the input integer’s digits.

---

### **Pseudocode Example:**

```python
def sum_digits_to_binary(n):
    # Step 2: Sum the digits
    total = 0
    if n == 0:
        total = 0
    else:
        while n > 0:
            total += n % 10
            n = n // 10

    # Step 3: Convert to binary string
    binary_result = bin(total)[2:]  # Remove '0b' prefix

    # Step 4: Return result
    return binary_result
```

---

**Summary:**  
The algorithm maps an integer to a string representing the binary value of the sum of its digits, following a sequence of digit-summing and binary-conversion steps.