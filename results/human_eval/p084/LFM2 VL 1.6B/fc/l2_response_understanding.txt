### Algorithm Overview

The algorithm is designed to convert a decimal number into a binary representation. It takes an integer as input and outputs its binary equivalent as a string.

### Input Data

- **Input**: An integer `n`

### Main Logical Flow

1. **Start**: The process begins.
2. **Check if `n` is less than or equal to 0**:
   - **Decision**: If `n <= 0`, then proceed to the next step.
   - **Action**: If true, return "Invalid input. Please enter a positive integer."
3. **Initialize Variables**:
   - **Decision**: If `n` is positive, initialize `sum` to 0 and `res` to an empty string.
   - **Action**: Set `sum = 0` and `res = ""`.
4. **Calculate the Sum of Digits**:
   - **Decision**: Iterate through each digit of `n` starting from the least significant digit.
   - **Action**: For each digit, convert it to an integer and add it to `sum`.
5. **Convert Sum to Binary**:
   - **Decision**: After calculating the sum, convert it to binary.
   - **Action**: Use a loop to repeatedly divide the sum by 2 and collect the remainders.
6. **Build Binary String**:
   - **Decision**: For each remainder, append the corresponding binary digit (0 or 1) to `res`.
   - **Action**: Append the remainder to `res`.
7. **Convert Binary to String**:
   - **Action**: Reverse the `res` string to get the correct binary representation.
8. **End**: The process ends.

### Expected Output

- **Output**: A string representing the binary equivalent of the input integer `n`.

### Example

**Input**: `n = 13`
**Output**: `"1101"`

**Explanation**:
- The decimal number 13 is converted to binary: 1101.
- The binary string is "1101".